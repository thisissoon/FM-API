#
# API Deployment
#

# Nginx Config Map
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-api-conf
data:
  api.conf: |
    server_tokens                   off;
    client_body_buffer_size         10K;
    client_header_buffer_size       1k;
    client_max_body_size            8m;
    large_client_header_buffers     2 1k;
    client_body_timeout             12;
    client_header_timeout           12;
    send_timeout                    10;
    gzip                            on;
    gzip_comp_level                 6;
    gzip_min_length                 1000;
    gzip_proxied                    expired no-cache no-store private auth;
    gzip_types                      text/plain application/x-javascript text/xml text/css application/xml application/json;
    add_header                      X-Frame-Options "DENY";
    add_header                      X-Content-Type-Options "nosniff";
    add_header                      X-XSS-Protection "1; mode=block";
    server {
        listen 80;
        location / {
            proxy_pass          http://localhost:5000;
            proxy_set_header    Host            $host;
            proxy_set_header    X-Real-IP       $remote_addr;
            proxy_set_header    X-Forwarded-for $remote_addr;
        }
    }
---
# Service
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
    tier: backend
    env: prod
spec:
  type: NodePort
  ports:
  - port: 80
  selector:
    app: api
    tier: backend
    env: prod
---
# Deployment
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: api
        tier: backend
        env: prod
    spec:
      # Volumes
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-api-conf
      # Containers
      containers:
      # Nginx Container
      - name: nginx
        image: nginx:1.10.3-alpine
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d
        ports:
        - containerPort: 80
      # # Python API Application
      - name: api
        image: $IMAGE
        env:
          - name: REDIS_HOST
            value: redis:6379
          - name: SQLALCHEMY_DB_HOST
            value: cloudsql.default
          - name: SQLALCHEMY_DB_USER
            valueFrom:
              secretKeyRef:
                name: cloudsql-api-credentials
                key: username
          - name: SQLALCHEMY_DB_PASS
            valueFrom:
              secretKeyRef:
                name: cloudsql-api-credentials
                key: password
---
# Migration Job
apiVersion: batch/v1
kind: Job
metadata:
  name: dbupgrade
spec:
  template:
    metadata:
      labels:
        app: api
        tier: backend
        env: prod
    spec:
      restartPolicy: Never
      containers:
      - name: dbupgrade
        image: $IMAGE
        command:
          - python
          - ./manage.py
          - db
          - upgrade
        env:
          - name: SQLALCHEMY_DB_HOST
            value: cloudsql.default
          - name: SQLALCHEMY_DB_USER
            valueFrom:
              secretKeyRef:
                name: cloudsql-api-credentials
                key: username
          - name: SQLALCHEMY_DB_PASS
            valueFrom:
              secretKeyRef:
                name: cloudsql-api-credentials
                key: password
